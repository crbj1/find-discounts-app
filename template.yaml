Parameters:
  Stage:
    Type: String
    Default: dev

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x

Resources:
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  # Authorizer
  authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorizer/
      Handler: authorizer.handler
      Environment:
        Variables:
          COGNITO_USERPOOL_ID: !Ref cognitoUserPool
          COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

  createUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-crud/
      Handler: handler.createUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt userTable.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /user-register
            Method: post
            RestApiId: !Ref ApiDeployment

  updateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-crud/
      Handler: handler.updateUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt userTable.Arn
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /user-register/{id}
            Method: put
            RestApiId: !Ref ApiDeployment

  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-crud/
      Handler: handler.deleteUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt userTable.Arn
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /user-register/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

  getUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-crud/
      Handler: handler.getUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt userTable.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /user-register/{id}
            Method: get
            RestApiId: !Ref ApiDeployment

  getAllUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-crud/
      Handler: handler.getAllUsers
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !GetAtt userTable.Arn
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /user-register
            Method: get
            RestApiId: !Ref ApiDeployment

  # User dynamodb table
  userTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", ["user-", Ref: Stage, "-table"]]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH


  createLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: location-crud/
      Handler: handler.createLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt locationTable.Arn
      Events:
        CreateLocation:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /location
            Method: post
            RestApiId: !Ref ApiDeployment

  updateLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: location-crud/
      Handler: handler.updateLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt locationTable.Arn
      Events:
        UpdateLocation:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /location/{id}
            Method: put
            RestApiId: !Ref ApiDeployment

  deleteLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: location-crud/
      Handler: handler.deleteLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt locationTable.Arn
      Events:
        DeleteLocation:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /location/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

  getLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: location-crud/
      Handler: handler.getLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt locationTable.Arn
      Events:
        GetLocation:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /location/{id}
            Method: get
            RestApiId: !Ref ApiDeployment

  getAllLocations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: location-crud/
      Handler: handler.getAllLocations
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !GetAtt locationTable.Arn
      Events:
        GetAllLocations:
          Type: Api
          Properties:
            Auth: authorizer
            Path: /location
            Method: get
            RestApiId: !Ref ApiDeployment

  # Location dynamodb table
  locationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", ["location-", Ref: Stage, "-table"]]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: locationId
          AttributeType: S
      KeySchema:
        - AttributeName: locationId
          KeyType: HASH

  # Cognito User Pool
  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["", ["find-discounts-", Ref: Stage, "-userpool"]]

  #User Pool Web Client
  cognitoUserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref cognitoUserPool
      ClientName: web
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - phone
        - email
        - profile
        - openid
      AllowedOAuthFlows:
        - implicit
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - http://localhost:3000

  #User Pool Domain
  cognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref cognitoUserPool
      Domain: !Join ["", ["finddiscountsINmonroe-", Ref: Stage ]]
