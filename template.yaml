Parameters:
  Stage:
    Type: String
    Default: dev

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x

Resources:
  #API Gateway
  ApiDeployment:
    Type: AWS::Serverless::Api
    DependsOn: ApiCWLRoleArn
    Properties:
      StageName: !Ref Stage
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status', 'protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt authorizer.Arn
      Cors:
        AllowCredentials: true
        AllowOrigin: "'http://localhost:4200'" 
        AllowHeaders: "'*'"
        AllowMethods: "'*'"

  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  #IAM Role for API GW + CWL
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["api-access-log-group-", Ref: Stage]]

  # Authorizer
  authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: authorizer/authorizer.handler
      Environment:
        Variables:
          COGNITO_USERPOOL_ID: !Ref cognitoUserPool
          COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        "gatewayresponse.header.Access-Control-Allow-Origin": "'http://localhost:4200'"
        "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
      ResponseType: "DEFAULT_4XX"
      RestApiId:
        Ref: "ApiDeployment"

  createUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: user-crud/handler.createUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt userTable.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            Path: /user-register
            Method: post
            RestApiId: !Ref ApiDeployment

  updateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: user-crud/handler.updateUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt userTable.Arn
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /user-register/{id}
            Method: put
            RestApiId: !Ref ApiDeployment

  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: user-crud/handler.deleteUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt userTable.Arn
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /user-register/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

  getUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: user-crud/handler.getUser
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt userTable.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user-register/{id}
            Method: get
            RestApiId: !Ref ApiDeployment

  getAllUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: user-crud/handler.getAllUsers
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref userTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !GetAtt userTable.Arn
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Path: /user-register
            Method: get
            RestApiId: !Ref ApiDeployment

  # User dynamodb table
  userTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", ["user-", Ref: Stage, "-table"]]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH


  createLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: location-crud/handler.createLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt locationTable.Arn
      Events:
        CreateLocation:
          Type: Api
          Properties:
            # Auth:
            #   Authorizer: NONE
            Path: /location
            Method: post
            RestApiId: !Ref ApiDeployment

  updateLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: location-crud/handler.updateLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt locationTable.Arn
      Events:
        UpdateLocation:
          Type: Api
          Properties:
            Path: /location/{id}
            Method: put
            RestApiId: !Ref ApiDeployment

  deleteLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: location-crud/handler.deleteLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !GetAtt locationTable.Arn
      Events:
        DeleteLocation:
          Type: Api
          Properties:
            Path: /location/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

  getLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: location-crud/handler.getLocation
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt locationTable.Arn
      Events:
        GetLocation:
          Type: Api
          Properties:
            Path: /location/{id}
            Method: get
            RestApiId: !Ref ApiDeployment

  getAllLocations:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EventHandlers/
      Handler: location-crud/handler.getAllLocations
      Environment:
        Variables:
          LOCATION_TABLE_NAME: !Ref locationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !GetAtt locationTable.Arn
      Events:
        GetAllLocations:
          Type: Api
          Properties:
            # Auth:
            #   Authorizer: NONE
            Path: /location
            Method: get
            RestApiId: !Ref ApiDeployment

  # Location dynamodb table
  locationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["", ["location-", Ref: Stage, "-table"]]
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: locationId
          AttributeType: S
      KeySchema:
        - AttributeName: locationId
          KeyType: HASH

  # Cognito User Pool
  cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: restId
      UserPoolName: !Join ["", ["find-discounts-", Ref: Stage, "-userpool"]]

  #User Pool Web Client
  cognitoUserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref cognitoUserPool
      ClientName: web
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - phone
        - email
        - profile
        - openid
      AllowedOAuthFlows:
        - implicit
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - http://localhost:3000

  #User Pool Domain
  cognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref cognitoUserPool
      Domain: !Join ["", ["finddiscountsinmonroe-", Ref: Stage ]]

  # Map
  Map:
    Type: AWS::Location::Map
    Properties:
      Configuration:
        Style: VectorEsriNavigation
      MapName: !Join ["", ["find-discounts-", Ref: Stage, "-map"]]
      PricingPlan: RequestBasedUsage

  # Index
  Index:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Esri
      DataSourceConfiguration:
        IntendedUse: Storage
      IndexName: !Join ["", ["find-discounts-", Ref: Stage, "-index"]]
      PricingPlan: RequestBasedUsage

  #Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join ["", ["find-discounts-", Ref: Stage, "-identitypool"]]
      AllowUnauthenticatedIdentities: true

  CognitoUnauthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: !Join ["", ["find-discounts-", Ref: Stage, "-unauthorized-policy"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: SearchPlaceIndexOnly
                Effect: Allow
                Action:
                  - 'geo:SearchPlaceIndexForText'
                Resource: !Sub 'arn:${AWS::Partition}:geo:${AWS::Region}:${AWS::AccountId}:place-index/${Index}'
                # Condition:
                #   StringLike:
                #     'aws:Referer':
                #       - !Join ["", ["finddiscountsinmonroe-", Ref: Stage, "/*"]]
              - Sid: MapsReadOnly
                Effect: Allow
                Action:
                  - 'geo:GetMap*'
                Resource: !Sub 'arn:${AWS::Partition}:geo:${AWS::Region}:${AWS::AccountId}:map/${Map}'
                # Condition:
                #   StringLike:
                #     'aws:Referer':
                #       - !Join ["", ["finddiscountsinmonroe", Ref: Stage, "/*"]]
  
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnauthorizedRole.Arn
